import React from 'react';
import { atom } from 'recoil';
import dayjs from 'dayjs';
import {
	Category,
	Forum,
	MoneyOff,
	PriceCheck,
	Settings,
	Timer,
} from '@mui/icons-material';
import { Tooltip } from '@mui/material';
import {
	currency,
	percent,
	percentDifference,
	sum,
	average,
	margin,
	sellDiscount,
	dateTryParse,
	intTryParse,
	zohoFilenameParserFromDownloadUrl,
} from '../components/Helpers/functions';

//#region //* Helpers
const productTypeIcon = (type) => {
	switch (type) {
		case 'Goods':
			return (
				<Tooltip arrow title='Goods' placement='right'>
					<Settings color='primary' />
				</Tooltip>
			);
		case 'Service':
			return (
				<Tooltip arrow title='Service' placement='right'>
					<Timer color='secondary' />
				</Tooltip>
			);
		case 'Assembly':
			return (
				<Tooltip arrow title='Assembly' placement='right'>
					<Category color='success' />
				</Tooltip>
			);
		case 'Comment':
			return (
				<Tooltip arrow title='Comment' placement='right'>
					<Forum color='info' />
				</Tooltip>
			);
		case 'Contingency':
			return (
				<Tooltip arrow title='Contingency' placement='right'>
					<PriceCheck color='warning' />
				</Tooltip>
			);
		case 'Credit':
			return (
				<Tooltip arrow title='Credit' placement='right'>
					<MoneyOff color='error' />
				</Tooltip>
			);
	}
};

const formatDate = (data) => {
	return dayjs(data).format('l');
};

const formatTime = (data) => {
	return dayjs(data).format('LT');
};

const formatDateTime = (data) => {
	return dayjs(data).format('l LT');
};

//#endregion

//#region //* Operators
const stringOperators = (field, value, resultOverride) => {
	const temp = [
		{
			label: 'contains',
			result: `${field}.contains("${value}")`,
			disableValue: false,
		},
		{
			label: 'does not contain',
			result: `!${field}.contains("${value}")`,
			disableValue: false,
		},
		{
			label: 'equals',
			result: `${field} == "${value}"`,
			disableValue: false,
		},
		{
			label: 'not equal to',
			result: `${field} != "${value}"`,
			disableValue: false,
		},
		{
			label: 'is empty',
			result: `(${field} == "" || ${field} == null)`,
			disableValue: true,
		},
		{
			label: 'is not empty',
			result: `(${field} != "" && ${field} != null)`,
			disableValue: true,
		},
		{
			label: 'starts with',
			result: `${field}.startsWith("${value}")`,
			disableValue: false,
		},
		{
			label: 'does not start with',
			result: `!${field}.startsWith("${value}")`,
			disableValue: false,
		},
		{
			label: 'ends with',
			result: `${field}.endsWith("${value}")`,
			disableValue: false,
		},
		{
			label: 'does not end with',
			result: `!${field}.endsWith("${value}")`,
			disableValue: false,
		},
	];

	if (resultOverride) {
		return [resultOverride, ...temp];
	}
	return temp;
};

const numberOperators = (field, value) => {
	return [
		{
			label: 'equals',
			result: `${field} == ${value}`,
			disableValue: false,
		},
		{
			label: 'not equal to',
			result: `${field} != ${value}`,
			disableValue: false,
		},
		{
			label: 'less than',
			result: `${field} < ${value}`,
			disableValue: false,
		},
		{
			label: 'less than or equal to',
			result: `${field} <= ${value}`,
			disableValue: false,
		},
		{
			label: 'greater than',
			result: `${field} > ${value}`,
			disableValue: false,
		},
		{
			label: 'greater than or equal to',
			result: `${field} >= ${value}`,
			disableValue: false,
		},
		{
			label: 'is empty',
			result: `${field} = null`,
			disableValue: true,
		},
		{
			label: 'is not empty',
			result: `${field} != null`,
			disableValue: true,
		},
	];
};

const checkboxOperators = (field, value) => {
	return [
		{
			label: 'equals',
			result: `${field} = ${value.toString()}`,
			disableValue: false,
		},
	];
};

const dateOperators = (field, value1, value2, days) => {
	return [
		{
			label: 'equals',
			result: `${field} = ${value1}`,
			disableValue: false,
		},
		{
			label: 'not equal to',
			result: `${field} != '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is before',
			result: `${field} <= '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is after',
			result: `${field} >= '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is between',
			result: `(${field} >= '${value1}' && ${field} <= '${value2}')`,
			disableValue: false,
		},
		{
			label: 'is not between',
			result: `(${field} < '${value1}' && ${field} > '${value2}')`,
			disableValue: false,
		},
		{
			label: 'today',
			result: () => `${field} = '${dayjs().format('l')}'`,
			disableValue: true,
		},
		{
			label: 'tomorrow',
			result: () => `${field} = '${dayjs().add(1, 'day').format('l')}'`,
			disableValue: true,
		},
		{
			label: 'starting tomorrow',
			result: () => `${field} >= '${dayjs().add(1, 'day').format('l')}'`,
			disableValue: true,
		},
		{
			label: 'yesterday',
			result: () => `${field} = '${dayjs().subtract(1, 'day').format('l')}'`,
			disableValue: true,
		},
		{
			label: 'until yesterday',
			result: () => `${field} <= '${dayjs().subtract(1, 'day').format('l')}'`,
			disableValue: true,
		},
		{
			label: 'last month',
			result: () =>
				`(${field} >= '${dayjs()
					.subtract(1, 'month')
					.startOf('month')
					.format('l')}' && ${field} <= '${dayjs()
					.subtract(1, 'month')
					.endOf('month')
					.format('l')}')`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'current month',
			result: () =>
				`(${field} >= '${dayjs()
					.startOf('month')
					.format('l')}' && ${field} <= '${dayjs()
					.endOf('month')
					.format('l')}')`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'next month',
			result: () =>
				`(${field} >= '${dayjs()
					.add(1, 'month')
					.startOf('month')
					.format('l')}' && ${field} <= '${dayjs()
					.add(1, 'month')
					.endOf('month')
					.format('l')}')`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'last week',
			result: () =>
				`(${field} >= '${dayjs()
					.subtract(1, 'week')
					.startOf('week')
					.format('l')}' && ${field} <= '${dayjs()
					.subtract(1, 'week')
					.endOf('week')
					.format('l')}')`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'current week',
			result: () =>
				`(${field} >= '${dayjs()
					.startOf('week')
					.format('l')}' && ${field} <= '${dayjs()
					.endOf('week')
					.format('l')}')`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'next week',
			result: () =>
				`(${field} >= '${dayjs()
					.add(1, 'week')
					.startOf('week')
					.format('l')}' && ${field} <= '${dayjs()
					.add(1, 'week')
					.endOf('week')
					.format('l')}')`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'age in days',
			result: () =>
				`(${field} >= '${dayjs()
					.subtract(value1, 'day')
					.startOf('day')
					.format('l')}' && ${field} <= '${dayjs().format('l')}')`,
			disableValue: false,
			renderType: 'number',
		},
		{
			label: 'due in days',
			result: () =>
				`(${field} >= '${dayjs().format('l')}' && ${field} <= '${dayjs()
					.add(value1, 'day')
					.endOf('day')
					.format('l')}')`,
			disableValue: false,
			renderType: 'number',
		},
		{
			label: 'is empty',
			result: `(${field} = '' || ${field} = null)`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'is not empty',
			result: `(${field} != '' && ${field} != null)`,
			disableValue: true,
			renderType: 'string',
		},
	];
};

const dateTimeOperators = (field, value1, value2, days) => {
	return [
		{
			label: 'equals',
			result: `${field} = ${value1}`,
			disableValue: false,
		},
		{
			label: 'not equal to',
			result: `${field} != '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is before',
			result: `${field} <= '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is after',
			result: `${field} >= '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is between',
			result: `(${field} >= '${value1}' && ${field} <= '${value2}')`,
			disableValue: false,
		},
		{
			label: 'is not between',
			result: `(${field} < '${value1}' && ${field} > '${value2}')`,
			disableValue: false,
		},
		{
			label: 'today',
			result: () =>
				`(${field} >= '${dayjs()
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'tomorrow',
			result: () =>
				`(${field} >= '${dayjs()
					.add(1, 'day')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.add(1, 'day')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'starting tomorrow',
			result: () =>
				`${field} >= '${dayjs().add(1, 'day').startOf('day').format('l LT')}'`,
			disableValue: true,
		},
		{
			label: 'yesterday',
			result: () =>
				`(${field} >= '${dayjs()
					.subtract(1, 'day')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.subtract(1, 'day')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'until yesterday',
			result: () =>
				`${field} <= '${dayjs()
					.subtract(1, 'day')
					.endOf('day')
					.format('l LT')}'`,
			disableValue: true,
		},
		{
			label: 'last month',
			result: () =>
				`(${field} >= '${dayjs()
					.subtract(1, 'month')
					.startOf('month')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.subtract(1, 'month')
					.endOf('month')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'current month',
			result: () =>
				`(${field} >= '${dayjs()
					.startOf('month')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.endOf('month')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'next month',
			result: () =>
				`(${field} >= '${dayjs()
					.add(1, 'month')
					.startOf('month')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.add(1, 'month')
					.endOf('month')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'last week',
			result: () =>
				`(${field} >= '${dayjs()
					.subtract(1, 'week')
					.startOf('week')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.subtract(1, 'week')
					.endOf('week')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'current week',
			result: () =>
				`(${field} >= '${dayjs()
					.startOf('week')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.endOf('week')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'next week',
			result: () =>
				`(${field} >= '${dayjs()
					.add(1, 'week')
					.startOf('week')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.add(1, 'week')
					.endOf('week')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: true,
		},
		{
			label: 'age in days',
			result: () =>
				`(${field} >= '${dayjs()
					.subtract(value1, 'day')
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.endOf('day')
					.format('l LT')}')`,
			disableValue: false,
			renderType: 'number',
		},
		{
			label: 'due in days',
			result: () =>
				`(${field} >= '${dayjs()
					.startOf('day')
					.format('l LT')}' && ${field} <= '${dayjs()
					.add(value1, 'day')
					.endOf('day')
					.format('l LT')}')`,
			disableValue: false,
			renderType: 'number',
		},
		{
			label: 'is empty',
			result: `(${field} = '' || ${field} = null)`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'is not empty',
			result: `(${field} != '' && ${field} != null)`,
			disableValue: true,
			renderType: 'string',
		},
	];
};

const timeOperators = (field, value1, value2) => {
	return [
		{
			label: 'equals',
			result: `${field} = ${value1}`,
			disableValue: false,
		},
		{
			label: 'not equal to',
			result: `${field} != '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is before',
			result: `${field} <= '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is after',
			result: `${field} >= '${value1}'`,
			disableValue: false,
		},
		{
			label: 'is between',
			result: `(${field} >= '${value1}' && ${field} <= '${value2}')`,
			disableValue: false,
		},
		{
			label: 'is not between',
			result: `(${field} < '${value1}' && ${field} > '${value2}')`,
			disableValue: false,
		},
		{
			label: 'is empty',
			result: `(${field} = '' || ${field} = null)`,
			disableValue: true,
			renderType: 'string',
		},
		{
			label: 'is not empty',
			result: `(${field} != '' && ${field} != null)`,
			disableValue: true,
			renderType: 'string',
		},
	];
};
//#endregion

//! Accounts
export const accountColumnsState = atom({
	key: 'accountColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Name', value), //col.operators.map(op => { op.label, op.result })
			required: true,
		},
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Owner',
			valueKey: 'Owner',
			disablePadding: false,
			type: 'string',
			searchKey: ['Owner_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Owner_Name', value),
			required: true,
		},
		{
			label: 'Street',
			filterLabel: 'Shipping Street',
			valueKey: 'Shipping_Address_Street',
			disablePadding: false,
			type: 'string',
			searchKey: ['Shipping_Address_Street'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Shipping_Address_Street', value),
			required: true,
		},
		{
			label: 'City',
			filterLabel: 'Shipping City',
			valueKey: 'Shipping_Address_City',
			disablePadding: false,
			type: 'string',
			searchKey: ['Shipping_Address_City'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Shipping_Address_City', value),
			required: true,
		},
		{
			label: 'State',
			filterLabel: 'Shipping State',
			valueKey: 'Shipping_Address_State',
			disablePadding: false,
			type: 'string',
			searchKey: ['Shipping_Address_State'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Shipping_Address_State', value),
			required: true,
		},
		{
			label: 'Zip Code',
			filterLabel: 'Shipping Zip Code',
			valueKey: 'Shipping_Address_Zip_Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Shipping_Address_Zip_Code'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Shipping_Address_Zip_Code', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: ['Prospect', 'Customer', 'Former Customer'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
			defaultValue: 'Prospect',
		},
		{
			label: 'Industry',
			valueKey: 'Industry',
			disablePadding: false,
			type: 'string',
			searchKey: ['Industry_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Industry_Name', value),
		},
		{
			label: 'Copy Shipping Address',
			valueKey: 'Copy_Shipping_Address',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Copy_Shipping_Address', value),
			defaultValue: false,
		},
		{
			label: 'Street',
			filterLabel: 'Billing Street',
			valueKey: 'Billing_Address_Street',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Billing_Address_Street', value),
		},
		{
			label: 'City',
			filterLabel: 'Billing City',
			valueKey: 'Billing_Address_City',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Billing_Address_City', value),
		},
		{
			label: 'State',
			filterLabel: 'Billing State',
			valueKey: 'Billing_Address_State',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Billing_Address_State', value),
		},
		{
			label: 'State',
			filterLabel: 'Billing Zip Code',
			valueKey: 'Billing_Address_Zip_Code',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Billing_Address_Zip_Code', value),
		},
		{
			label: 'Note',
			valueKey: 'Note',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Note', value),
		},
		{
			label: 'Phone Number',
			valueKey: 'Phone_Number',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Phone_Number', value),
		},
		{
			label: 'Tax Goods',
			valueKey: 'Tax_Goods',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Tax_Goods', value),
		},
		{
			label: 'Tax Services',
			valueKey: 'Tax_Services',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Tax_Services', value),
		},
		{
			label: 'Tax Freight',
			valueKey: 'Tax_Freight',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Tax_Freight', value),
		},
		{
			label: 'Tax Rate',
			valueKey: 'Tax_Rate',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Tax_Rate', value),
		},
		{
			label: 'Tax Exempt',
			valueKey: 'Tax_Exempt',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Tax_Exempt', value),
		},
		{
			label: 'Tax Exempt Cert#',
			valueKey: 'Tax_Exempt_Certification',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Tax_Exempt_Certification', value),
		},
		{
			label: 'Out of State',
			valueKey: 'Out_of_State',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Out_of_State', value),
		},
		{
			label: 'Enable Special Instructions',
			valueKey: 'Has_Special_Instructions',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) =>
				checkboxOperators('Has_Special_Instructions', value),
		},
		{
			label: 'Special Instructions',
			valueKey: 'Special_Instructions',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Special_Instructions', value),
		},
	],
});

//! Attachments
export const attachmentColumnsState = atom({
	key: 'attachmentColumnsState',
	default: [
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
		},
		{
			label: 'File',
			valueKey: 'File_Upload',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload', value),
			required: true,
		},
		{
			label: 'Created',
			valueKey: 'Added_Time',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateTimeOperators('Added_Time', value),
		},
	],
});

//? Billing Entities
export const billingEntityColumnsState = atom({
	key: 'billingEntityColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			operators: (value) => stringOperators('Account_Name', value),
		},
	],
});

//! Contacts
export const contactColumnsState = atom({
	key: 'contactColumnsState',
	default: [
		{
			label: 'First Name',
			valueKey: 'First_Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['First_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('First_Name', value),
			required: true,
		},
		{
			label: 'Last Name',
			valueKey: 'Last_Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Last_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Last_Name', value),
			required: true,
		},
		{
			label: 'Email',
			valueKey: 'Email',
			disablePadding: false,
			type: 'string',
			searchKey: ['Email'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Email', value),
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
		},
		{
			label: 'Profile',
			valueKey: 'Profile',
			disablePadding: false,
			type: 'string',
			searchKey: ['Profile_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Profile_Name', value),
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: ['Account', 'Subcontractor', 'Vendor'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			defaultValue: 'Account',
			required: true,
		},
		{
			label: 'Note',
			valueKey: 'Note',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Note', value),
		},
		{
			label: 'Direct Phone',
			valueKey: 'Direct_Phone',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Direct_Phone', value),
		},
		{
			label: 'Cell Phone',
			valueKey: 'Cell_Phone',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Cell_Phone', value),
		},
	],
});

//! Customer Assets
export const customerAssetColumnsState = atom({
	key: 'customerAssetColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: ['Comment'],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Comment', value),
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account', value),
			required: true,
		},
		{
			label: 'Serial Number',
			valueKey: 'Serial_Number',
			disablePadding: false,
			type: 'string',
			searchKey: ['Serial_Number_Value'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Serial_Number', value),
		},
		{
			label: 'Quantity',
			valueKey: 'Quantity',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity', value),
			required: true,
		},
		{
			label: 'Customer Room',
			valueKey: 'Customer_Room',
			disablePadding: false,
			type: 'string',
			searchKey: ['Customer_Room_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Customer_Room', value),
		},
		{
			label: 'Service Contact',
			valueKey: 'Service_Contact',
			disablePadding: false,
			type: 'string',
			searchKey: ['Service_Contact_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Service_Contact', value),
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: () => [
				'Active',
				'Inactive',
				'Exchanged',
				'On RMA',
				'Removed',
				'Replaced',
				'Returned',
				'Transferred',
			],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Price Book Item',
			valueKey: 'Price_Book_Item',
			disablePadding: false,
			type: 'string',
			searchKey: ['Price_Book_Item_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Price_Book_Item', value),
		},
		{
			label: 'Purchase Date',
			valueKey: 'Purchase_Date',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Purchase_Date', value),
		},
		{
			label: 'Purchase Price',
			valueKey: 'Purchase_Price',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Purchase_Price', value),
		},
		{
			label: 'Purchase Order',
			valueKey: 'Purchase_Order',
			disablePadding: false,
			type: 'string',
			searchKey: ['Purchase_Order_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Purchase_Order', value),
		},
		{
			label: 'Sales Order',
			valueKey: 'Sales_Order',
			disablePadding: false,
			type: 'string',
			searchKey: ['Sales_Order_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Sales_Order', value),
		},
	],
});

//! Customer Rooms
export const customerRoomColumnsState = atom({
	key: 'customerRoomColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Drawings Name',
			valueKey: 'Drawings_Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Drawings_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Drawings_Name', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account', value),
			required: true,
		},
		{
			label: 'Service Contact',
			valueKey: 'Service_Contact',
			disablePadding: false,
			type: 'string',
			searchKey: ['Service_Contact_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Service_Contact', value),
		},
	],
});

//! Demos
export const demoColumnsState = atom({
	key: 'demoColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Alias',
			valueKey: 'Alias',
			disablePadding: false,
			type: 'string',
			searchKey: ['Alias'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Alias', value),
			required: true,
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: ['Manufacturer', 'Internal'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: () => ['Active', 'Complete'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
			defaultValue: 'Active',
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'html',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Owner',
			valueKey: 'Owner',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Owner', value),
			required: true,
		},
		{
			label: 'Price Book Items',
			valueKey: 'Price_Book_Items',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Price_Book_Items', value),
			required: true,
		},
		{
			label: 'Return Date',
			valueKey: 'Product_Return_Date',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Return_Date', value),
			required: true,
		},
		{
			label: 'Purchase Order',
			valueKey: 'Purchase_Order',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Purchase_Order', value),
		},
	],
});

//! Emails
export const emailColumnsState = atom({
	key: 'emailColumnsState',
	default: [
		{
			label: 'To',
			valueKey: 'To',
			disablePadding: false,
			type: 'string',
			searchKey: ['To'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('To', value),
			required: true,
		},
		{
			label: 'From',
			valueKey: 'From',
			disablePadding: false,
			type: 'string',
			searchKey: ['From'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('From', value),
		},
		{
			label: 'From',
			valueKey: 'From_Update',
			disablePadding: false,
			type: 'string',
			searchKey: ['From_Update'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('From_Update', value),
			required: true,
		},
		{
			label: 'Cc',
			valueKey: 'CC',
			disablePadding: false,
			type: 'string',
			searchKey: ['CC'],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('CC', value),
		},
		{
			label: 'Subject',
			valueKey: 'Subject_field',
			disablePadding: false,
			type: 'string',
			searchKey: ['Subject_field'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Subject_field', value),
			required: true,
		},
		{
			label: 'Message',
			valueKey: 'Message',
			disablePadding: false,
			type: 'html',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Message', value),
		},
		{
			label: 'File #1',
			valueKey: 'File_Upload_0',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_0'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_0', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
		{
			label: 'File #2',
			valueKey: 'File_Upload_1',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_1'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_1', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
		{
			label: 'File #3',
			valueKey: 'File_Upload_2',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_2'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_2', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
		{
			label: 'File #4',
			valueKey: 'File_Upload_3',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_3'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_3', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
		{
			label: 'File #5',
			valueKey: 'File_Upload_4',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_4'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_4', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
	],
});

//! Employees
export const employeeColumnsState = atom({
	key: 'employeeColumnsState',
	default: [
		{
			label: 'First Name',
			valueKey: 'First_Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['First_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('First_Name', value),
			required: true,
		},
		{
			label: 'Last Name',
			valueKey: 'Last_Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Last_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Last_Name', value),
			required: true,
		},
		{
			label: 'Email',
			valueKey: 'Email',
			disablePadding: false,
			type: 'string',
			searchKey: ['Email'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Email', value),
			required: true,
		},
	],
});

//! Estimates
export const estimateColumnsState = atom({
	key: 'estimateColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
			required: true,
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: () => ['Open', 'Closed'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Total',
			valueKey: 'Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: (value) => currency(value),
			operators: (value) => numberOperators('Total', value),
			footer: sum,
		},
		{
			label: 'Terms',
			valueKey: 'Terms',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			options: ['Net 30', 'Net 45', 'Net 60', 'Net 90', 'Due on Receipt'],
			defaultValue: 'Net 30',
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Terms', value),
		},
		{
			label: 'Date',
			valueKey: 'Date_field',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Date_field', value),
			required: true,
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Comment', value),
			required: false,
		},
		{
			label: 'Customer Notes',
			valueKey: 'Customer_Notes',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Customer_Notes', value),
			required: false,
		},
		{
			label: 'Terms & Conditions',
			valueKey: 'Terms_Conditions',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Terms_Conditions', value),
			required: false,
		},
		{
			label: 'Void',
			valueKey: 'Void_field',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Void_field', value),
		},
	],
});

//! Estimate Line Items
export const estimateLineItemColumnsState = atom({
	key: 'estimateLineItemColumnsState',
	default: [
		{
			label: 'Sales Order',
			valueKey: 'Sales_Order',
			disablePadding: false,
			type: 'string',
			searchKey: ['Sales_Order.Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Sales_Order.Name', value),
		},
		{
			label: '',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			icon: productTypeIcon,
			searchKey: ['Type'],
			visible: true,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Code',
			valueKey: 'Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Code'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Code', value),
			required: true,
		},
		{
			label: 'Manufacturer',
			valueKey: 'Manufacturer',
			disablePadding: false,
			type: 'string',
			searchKey: ['Manufacturer'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer', value),
		},
		{
			label: 'Quantity',
			valueKey: 'Quantity',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Sell Price Each',
			valueKey: 'Sell_Price_Each',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			collapseFormula: (data) => sum(data, 'Sell_Price_Subtotal'),
			operators: (value) => numberOperators('Sell_Price_Each', value),
		},
		{
			label: 'Sell Price Subtotal',
			valueKey: 'Sell_Price_Subtotal',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Sell_Price_Subtotal', value),
		},
		{
			label: 'Sell Price Total',
			valueKey: 'Sell_Price_Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Sell_Price_Total', value),
		},
		{
			label: 'Cost',
			valueKey: 'Cost',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			collapseFormula: (data) => sum(data, 'Cost_Total'),
			operators: (value) => numberOperators('Cost', value),
		},
		{
			label: 'Cost Total',
			valueKey: 'Cost_Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Cost_Total', value),
		},
		{
			label: 'Discount (%)',
			valueKey: 'Discount_Rate',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			format: percent,
			footer: sellDiscount,
			collapseFormula: sellDiscount,
			footerTooltip:
				'[abs(Sell Price Subtotal - Sell Price Total) / ((Sell Price Subtotal + Sell Price Total) / 2 )] * 100%',
			operators: (value) => numberOperators('Discount_Rate', value),
		},
		{
			label: 'Discount ($)',
			valueKey: 'Discount_Dollars',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Discount_Dollars', value),
		},
		{
			label: 'Margin (%)',
			valueKey: 'Margin',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: percent,
			footer: (params) => margin(params) * 100,
			collapseFormula: (params) => margin(params) * 100,
			footerTooltip:
				'[(Sell Price Total - Cost Total) / Sell Price Total] * 100%',
			operators: (value) => numberOperators('Margin', value),
		},
	],
});

//! Expenses
export const expenseColumnsState = atom({
	key: 'expenseColumnsState',
	default: [
		{
			label: 'Employee',
			valueKey: 'Employee',
			disablePadding: false,
			type: 'string',
			searchKey: ['Employee_Full_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Employee_Full_Name', value),
			required: true,
		},
		{
			label: 'Approver',
			valueKey: 'Approver',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Approver_Full_Name', value),
			required: true,
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
		},
		{
			label: 'Date',
			valueKey: 'Date_field',
			disablePadding: false,
			type: 'date',
			searchKey: ['Date_field'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Date_field', value),
			required: true,
		},
		{
			label: 'Amount',
			valueKey: 'Amount',
			disablePadding: false,
			type: 'number',
			searchKey: ['Amount'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Amount', value),
			required: true,
		},
		{
			label: 'Merchant',
			valueKey: 'Merchant',
			disablePadding: false,
			type: 'string',
			searchKey: ['Merchant'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Merchant', value),
			required: true,
		},
		{
			label: 'Category',
			valueKey: 'Category',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Category', value),
			required: true,
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
			required: true,
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: ['Comment'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Comment', value),
		},
		{
			label: 'Paid Through',
			valueKey: 'Paid_Through',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Paid_Through', value),
			required: true,
		},
		{
			label: 'Purchase Order',
			valueKey: 'Purchase_Order',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Purchase_Order_Name', value),
		},
		{
			label: 'Receipt',
			valueKey: 'File_Upload',
			disablePadding: false,
			type: 'file',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload', value),
		},
	],
});

//! Inventory Adjustments
export const inventoryAdjustmentColumnsState = atom({
	key: 'inventoryAdjustmentColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: ['Comment'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Comment', value),
		},
		{
			label: 'Reason',
			valueKey: 'Reason',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reason_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reason', value),
			required: true,
		},
	],
});

//! Inventory Adjustment Line Items
export const inventoryAdjustmentLineItemColumnsState = atom({
	key: 'inventoryAdjustmentLineItemColumnsState',
	default: [
		{
			label: 'Inventory Adjustment',
			valueKey: 'Inventory_Adjustment',
			disablePadding: false,
			type: 'string',
			searchKey: ['Inventory_Adjustment.Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Inventory_Adjustment.Name', value),
		},
		{
			label: 'Warehouse Stock Item',
			valueKey: 'Warehouse_Stock_Item',
			disablePadding: false,
			type: 'string',
			searchKey: ['Warehouse_Stock_Item'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Warehouse_Stock_Item', value),
		},
		{
			label: 'Quantity to Adjust',
			valueKey: 'Quantity_to_Adjust',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity_to_Adjust', value),
		},
		{
			label: 'Serial Numbers to Add',
			valueKey: 'Serial_Numbers_to_Add',
			disablePadding: false,
			type: 'string',
			searchKey: ['Serial_Numbers_to_Add'],
			format: (values) => {
				if (Array.isArray(values)) {
					return values.join(', ');
				}

				if (typeof values === 'string' && values) {
					return JSON.parse(values);
				}

				return [];
			},
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Serial_Numbers_to_Add', value),
		},
		{
			label: 'Serial Numbers to Remove',
			valueKey: 'Serial_Numbers_to_Remove',
			disablePadding: false,
			type: 'string',
			searchKey: ['Serial_Numbers_to_Remove'],
			format: (values) => {
				if (Array.isArray(values)) {
					return values.join(', ');
				}

				if (typeof values === 'string' && values) {
					return JSON.parse(values);
				}

				return [];
			},
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Serial_Numbers_to_Remove', value),
		},
	],
});

//! Leads
export const leadColumnsState = atom({
	key: 'leadColumnsState',
	default: [],
});

//! Manufacturers
export const manufacturerColumnsState = atom({
	key: 'manufacturerColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
	],
});

//! Notes
export const noteColumnsState = atom({
	key: 'noteColumnsState',
	default: [
		{
			label: 'Note',
			valueKey: 'Note',
			disablePadding: false,
			type: 'html',
			searchKey: ['Note'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Note', value),
			required: true,
		},
		{
			label: 'Author',
			valueKey: 'Employee_Full_Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Employee_Full_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Employee_Full_Name', value),
		},
		{
			label: 'Tag Users',
			valueKey: 'Tag_Users',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Tag_Users', value),
		},
		{
			label: 'Created',
			valueKey: 'Added_Time',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateTimeOperators('Added_Time', value),
		},
		{
			label: 'File #1',
			valueKey: 'File_Upload_0',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_0'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_0', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
		{
			label: 'File #2',
			valueKey: 'File_Upload_1',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_1'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_1', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
		{
			label: 'File #3',
			valueKey: 'File_Upload_2',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_2'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_2', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
		{
			label: 'File #4',
			valueKey: 'File_Upload_3',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_3'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_3', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
		{
			label: 'File #5',
			valueKey: 'File_Upload_4',
			disablePadding: false,
			type: 'file',
			searchKey: ['File_Upload_4'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('File_Upload_4', value),
			exportFormat: (params) => zohoFilenameParserFromDownloadUrl(params),
		},
	],
});

//! Opportunities
export const opportunityColumnsState = atom({
	key: 'opportunityColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			exportFormat: (params) => (intTryParse(params) ? parseInt(params) : 0),
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Alias',
			valueKey: 'Alias',
			disablePadding: false,
			type: 'string',
			searchKey: ['Alias'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Alias', value),
			required: true,
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
			required: true,
		},
		{
			label: 'Owner',
			valueKey: 'Owner',
			disablePadding: false,
			type: 'string',
			searchKey: ['Owner'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Owner', value),
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: (type) => {
				switch (type) {
					case 'Service Contract':
					case 'Service':
						return [
							'Started',
							'Pending Service Dept. Review',
							'Service Dept. Review Complete',
							'Closed Won',
							'Closed Lost',
						];
					case 'Box Sale':
						return [
							'Started',
							'Proposal Draft Complete',
							'Approved for Submittal',
							'Closed Won',
							'Closed Lost',
						];
					default:
						return [
							'Started',
							'Pending Engineering Review',
							'Engineering Review Complete',
							'Proposal Draft Complete',
							'Approved for Submittal',
							'Closed Won',
							'Closed Lost',
						];
				}
			},
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: [
				'Design and Build',
				'Box Sale',
				'Design **ONLY**',
				'Build **ONLY**',
				'Service',
				'Hosted',
				'Service Contract',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
		},
		{
			label: 'Amount',
			valueKey: 'Amount',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			format: (params) => currency(params),
			exportFormat: (params) => (intTryParse(params) ? parseFloat(params) : 0),
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Amount', value),
			footer: sum,
			required: true,
		},
		{
			label: 'Closing Date',
			valueKey: 'Closing_Date',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			format: (params) => formatDate(params),
			//exportFormat: (params) => dateTryParse(params) ? Date.parse(params) : '',
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Closing_Date', value),
			required: true,
		},
		{
			label: 'Source',
			valueKey: 'Source',
			disablePadding: false,
			type: 'string',
			searchKey: ['Source'],
			options: [
				'ALA',
				'Call In',
				'CDC',
				'Cold Call',
				'Corenet',
				'DiscoverOrg',
				'Existing Client',
				'External Referral',
				'ILTA',
				'LinkedIn',
				'Referral',
				'Trade Journal',
				'Trade Show',
				'Web',
			],
			visible: false,
			hideSelect: true,
			disableSelect: true,
			operators: (value) => stringOperators('Source', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
		},
	],
});

//! Price Book Items
export const priceBookItemColumnsState = atom({
	key: 'priceBookItemColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Code',
			valueKey: 'Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Code'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Code', value),
			required: true,
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			icon: productTypeIcon,
			options: ['Goods', 'Service', 'Assembly', 'Comment', 'Credit'],
			searchKey: ['Type'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
			defaultValue: 'Goods',
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Manufacturer',
			valueKey: 'Manufacturer',
			disablePadding: false,
			type: 'string',
			searchKey: ['Manufacturer_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer_Name', value),
			required: false,
		},
		{
			label: 'Manufacturer Part Number',
			valueKey: 'Manufacturer_Part_Number',
			disablePadding: false,
			type: 'string',
			searchKey: ['Manufacturer_Part_Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer_Part_Number', value),
			required: false,
		},
		{
			label: 'Vendor',
			valueKey: 'Vendor',
			disablePadding: false,
			type: 'string',
			searchKey: ['Vendor_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Vendor_Name', value),
			required: false,
		},
		{
			label: 'Cost',
			valueKey: 'Cost',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Cost', value),
			required: true,
		},
		{
			label: 'Unit',
			valueKey: 'Unit',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Unit', value),
			required: true,
		},
		{
			label: 'Website',
			valueKey: 'Website',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Website', value),
		},
		{
			label: 'Active',
			valueKey: 'Active',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Active', value),
			required: false,
			defaultValue: true,
		},
		{
			label: 'Track Inventory',
			valueKey: 'Track_Inventory',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Track_Inventory', value),
			required: false,
			defaultValue: true,
		},
		{
			label: 'Purchase Item',
			valueKey: 'Purchase_Item',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Purchase_Item', value),
			required: false,
			defaultValue: true,
		},
		{
			label: 'Sales Item',
			valueKey: 'Sales_Item',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Sales_Item', value),
			required: false,
			defaultValue: true,
		},
		{
			label: 'Reorder Level',
			valueKey: 'Reorder_Level',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Reorder_Level', value),
			required: false,
			defaultValue: 0,
		},
		{
			label: 'Serialized',
			valueKey: 'Serialized',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Serialized', value),
			required: false,
			defaultValue: false,
		},
		{
			label: 'Sell Price',
			valueKey: 'Sell_Price',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Sell_Price', value),
			required: false,
		},
		{
			label: 'Margin',
			valueKey: 'Margin',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Margin', value),
			required: false,
		},
	],
});

//! Priorities
export const priorityColumnsState = atom({
	key: 'priorityColumnState',
	default: [
		{
			label: 'Employee(s)',
			valueKey: 'Employees',
			disablePadding: false,
			type: 'string',
			searchKey: ['Employees_Full_Names'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value, currentUser) =>
				stringOperators('Employees_Full_Names', value, {
					label: 'contains me',
					result: `Employees.contains(${currentUser?.ID})`,
					disableValue: true,
					provideCurrentUser: true,
				}),
			required: true,
		},
		{
			label: 'Title',
			valueKey: 'Title',
			disablePadding: false,
			type: 'string',
			searchKey: ['Title'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Title', value),
		},
		{
			label: 'Subtitle',
			valueKey: 'Subtitle',
			disablePadding: false,
			type: 'string',
			searchKey: ['Subtitle'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Subtitle', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Description', value),
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: [
				'To Do',
				'In Progress',
				'Waiting for Info',
				'Pending Review',
				'Done',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
		},
		{
			label: 'Due Date',
			valueKey: 'Due_Date',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Due_Date', value),
		},
		{
			label: 'Tags',
			valueKey: 'Tags',
			disablePadding: false,
			type: 'string',
			searchKey: ['Tags_Names'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Tags_Names', value),
		},
	],
});

//! Projects
export const projectColumnsState = atom({
	key: 'projectColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Alias',
			valueKey: 'Alias',
			disablePadding: false,
			type: 'string',
			searchKey: ['Alias'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Alias', value),
			required: true,
		},
		{
			label: 'Billing Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
			required: true,
		},
		{
			label: 'Accounts',
			valueKey: 'Accounts',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
			required: false,
		},
		{
			label: 'Owner',
			valueKey: 'Owner',
			disablePadding: false,
			type: 'string',
			searchKey: ['Owner'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Owner', value),
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: ['Preliminary', 'Open', 'On Hold', 'Pending Closeout', 'Closed'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Estimated Hours',
			valueKey: 'Total_Estimated_Hours',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			format: (params) =>
				intTryParse(params) ? parseFloat(parseFloat(params).toFixed(2)) : 0.0,
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Total_Estimated_Hours', value),
			footer: sum,
		},
		{
			label: 'Actual Hours',
			valueKey: 'Total_Actual_Hours',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			format: (params) =>
				intTryParse(params) ? parseFloat(parseFloat(params).toFixed(2)) : 0.0,
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Total_Actual_Hours', value),
			footer: sum,
		},
		{
			label: 'Cost to Date',
			valueKey: 'Estimated_Cost_to_Date',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			format: currency,
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Estimated_Cost_to_Date', value),
			footer: sum,
		},
		{
			label: 'Category',
			valueKey: 'Category',
			disablePadding: false,
			type: 'string',
			searchKey: ['Category'],
			options: ['Client', 'Internal'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Category', value),
			required: true,
		},
		{
			label: 'Project Manager',
			valueKey: 'Project_Manager',
			disablePadding: false,
			type: 'string',
			searchKey: ['Project_Manager_Full_Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Project_Manager', value),
			required: true,
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: false,
		},
		{
			label: 'Teamwork URL',
			valueKey: 'Teamwork_URL',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Teamwork_URL', value),
			required: false,
		},
	],
});

//! Purchase Orders
export const purchaseOrderColumnsState = atom({
	key: 'purchaseOrderColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Vendor',
			valueKey: 'Vendor',
			disablePadding: false,
			type: 'string',
			searchKey: ['Vendor_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Vendor_Name', value),
			required: true,
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: () => [
				'Open',
				'Approved',
				'Issued',
				'Partially Received',
				'Closed',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
			required: true,
		},
		{
			label: 'Total',
			valueKey: 'Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: (value) => currency(value),
			operators: (value) => numberOperators('Total', value),
			footer: sum,
		},
		{
			label: 'Warehouse',
			valueKey: 'Warehouse',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			defaultValue: { display_value: 'Warehouse', ID: '3860683000007894499' },
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Warehouse', value),
			required: true,
		},
		{
			label: 'Terms',
			valueKey: 'Terms',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			options: ['Net 30', 'Net 45', 'Net 60', 'Net 90', 'Due on Receipt'],
			defaultValue: 'Net 30',
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Terms', value),
			required: true,
		},
		{
			label: 'Payment Method',
			valueKey: 'Payment_Method',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			options: ['AMEX', 'VISA', 'Purchase Order'],
			defaultValue: 'Purchase Order',
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Payment_Method', value),
			required: true,
		},
		{
			label: 'Shipping Priority',
			valueKey: 'Shipping_Priority',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			options: ['Ground', 'Priority Overnight', '2nd Day Air'],
			defaultValue: 'Ground',
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Shipping_Priority', value),
		},
		{
			label: 'Date',
			valueKey: 'Date_field',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => dateOperators('Date_field', value),
			required: true,
			defaultValue: () => dayjs().add(90, 'day').format('l'),
		},
		{
			label: 'Buyer',
			valueKey: 'Buyer',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Buyer', value),
			required: true,
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Comment', value),
			required: false,
		},
		{
			label: 'Customer Notes',
			valueKey: 'Customer_Notes',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Customer_Notes', value),
			required: false,
		},
		{
			label: 'Terms & Conditions',
			valueKey: 'Terms_Conditions',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Terms_Conditions', value),
			required: false,
		},
		{
			label: 'Attention',
			valueKey: 'Attention',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Attention', value),
			required: false,
			defaultValue: 'VisionPoint LLC',
		},
		{
			label: 'Street',
			valueKey: 'Street',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Street', value),
			required: true,
			defaultValue: '152 Rockwell Rd',
		},
		{
			label: 'Street 2',
			valueKey: 'Street_2',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Street_2', value),
			required: false,
			defaultValue: 'Suite A3',
		},
		{
			label: 'City',
			valueKey: 'City',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('City', value),
			required: true,
			defaultValue: 'Newington',
		},
		{
			label: 'State',
			valueKey: 'State',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('State', value),
			required: true,
			defaultValue: 'CT',
		},
		{
			label: 'Zip Code',
			valueKey: 'Zip_Code',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Zip_Code', value),
			required: true,
			defaultValue: '06111',
		},
		{
			label: 'Void',
			valueKey: 'Void_field',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Void_field', value),
		},
	],
});

//! Purchase Order Line Items
export const purchaseOrderLineItemColumnsState = atom({
	key: 'purchaseOrderLineItemColumnsState',
	default: [
		{
			label: 'Quote',
			valueKey: 'Quote',
			disablePadding: false,
			type: 'string',
			searchKey: ['Quote.Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Quote.Name', value),
		},
		{
			label: '',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			icon: productTypeIcon,
			searchKey: ['Type'],
			visible: true,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Code',
			valueKey: 'Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Code'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Code', value),
			required: true,
		},
		{
			label: 'Manufacturer',
			valueKey: 'Manufacturer',
			disablePadding: false,
			type: 'string',
			searchKey: ['Manufacturer'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer', value),
		},
		{
			label: 'Quantity',
			valueKey: 'Quantity',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Cost',
			valueKey: 'Cost',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			collapseFormula: (data) => sum(data, 'Cost_Total'),
			operators: (value) => numberOperators('Cost', value),
		},
		{
			label: 'Cost Subtotal',
			valueKey: 'Cost_Subtotal',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			collapseFormula: (data) => sum(data, 'Cost_Subtotal'),
			operators: (value) => numberOperators('Cost_Subtotal', value),
		},
		{
			label: 'Cost Total',
			valueKey: 'Cost_Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Cost_Total', value),
		},
		{
			label: 'Discount (%)',
			valueKey: 'Discount_Rate',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			format: percent,
			footer: sellDiscount,
			collapseFormula: sellDiscount,
			footerTooltip:
				'[abs(Sell Price Subtotal - Sell Price Total) / ((Sell Price Subtotal + Sell Price Total) / 2 )] * 100%',
			operators: (value) => numberOperators('Discount_Rate', value),
		},
		{
			label: 'Discount ($)',
			valueKey: 'Discount_Dollars',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Discount_Dollars', value),
		},
	],
});

//! Purchase Receives
export const purchaseReceiveColumnsState = atom({
	key: 'purchaseReceiveColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Purchase Order',
			valueKey: 'Purchase_Order',
			disablePadding: false,
			type: 'string',
			searchKey: ['Purchase_Order.Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Purchase_Order.Name', value),
		},
		{
			label: 'Warehouse',
			valueKey: 'Purchase_Order.Warehouse',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Purchase_Order.Warehouse', value),
		},
		{
			label: 'Notes',
			valueKey: 'Notes',
			disablePadding: false,
			type: 'string',
			searchKey: ['Notes'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Notes', value),
		},
		{
			label: 'Date',
			valueKey: 'Added_Time',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Added_Time', value),
		},
	],
});

//! Purchase Receive Line Items
export const purchaseReceiveLineItemColumnsState = atom({
	key: 'purchaseReceiveLineItemColumnsState',
	default: [
		{
			label: 'Purchase Receive',
			valueKey: 'Purchase_Receive',
			disablePadding: false,
			type: 'string',
			searchKey: ['Purchase_Receive.Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Purchase_Receive.Name', value),
		},
		{
			label: 'Price Book Item',
			valueKey: 'Price_Book_Item',
			disablePadding: false,
			type: 'string',
			searchKey: [
				'Price_Book_Item.Name',
				'Price_Book_Item.Code',
				'Price_Book_Item.Description',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) =>
				stringOperators(
					[
						'Price_Book_Item.Name',
						'Price_Book_Item.Code',
						'Price_Book_Item.Description',
					],
					value
				),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Code',
			valueKey: 'Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Code'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Code', value),
			required: true,
		},
		{
			label: 'Manufacturer',
			valueKey: 'Manufacturer',
			disablePadding: false,
			type: 'string',
			searchKey: ['Manufacturer'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer', value),
		},
		{
			label: 'Quantity',
			valueKey: 'Quantity',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
	],
});

//! Quotes
export const quoteColumnsState = atom({
	key: 'quoteColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
			required: true,
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
			required: true,
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: [
				'Quote',
				'Change Order INTERNAL',
				'Change Order EXTERNAL',
				'Service Order',
				'Service Contract',
				'Box Sale',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: (type, amount) => {
				const decimalAmount = intTryParse(amount) ? parseFloat(amount) : 0;

				switch (type) {
					case 'Quote':
						return [
							'Open for Engineering',
							'Engineering Review Complete',
							'Proposal Review Complete',
							'Scope Review Complete',
							'Financial Review Complete',
							'Accepted',
						];
					case 'Change Order INTERNAL':
						if (decimalAmount >= 100) {
							return [
								'Open for Engineering',
								'Engineering Review Complete',
								'Finance Review Complete',
								'Accepted',
							];
						}

						return [
							'Open for Engineering',
							'Engineering Review Complete',
							'Accepted',
						];
					case 'Change Order EXTERNAL':
						return [
							'Open for Engineering',
							'Engineering Review Complete',
							'Sales Manager Review Complete',
							'Accepted',
						];
					case 'Service Contract':
					case 'Service Order':
					case 'Box Sale':
						return ['Open', 'Accepted'];
					default:
						return [
							'Open for Engineering',
							'Engineering Review Complete',
							'Proposal Review Complete',
							'Scope Review Complete',
							'Financial Review Complete',
							'Project Management Review Complete',
							'Accepted',
						];
				}
			},
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Total',
			valueKey: 'Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: (value) => currency(value),
			operators: (value) => numberOperators('Total', value),
			footer: sum,
		},
		{
			label: 'Sales Order',
			valueKey: 'Converted_to',
			disablePadding: false,
			type: 'string',
			searchKey: ['Sales_Order_Name'],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Sales_Order_Name', value),
		},
		{
			label: 'Terms',
			valueKey: 'Terms',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			options: ['Net 30', 'Net 45', 'Net 60', 'Net 90', 'Due on Receipt'],
			defaultValue: 'Net 30',
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Terms', value),
		},
		{
			label: 'Expiration Date',
			valueKey: 'Expiration_Date',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: true,
			operators: (value) => dateOperators('Expiration_Date', value),
			required: true,
			defaultValue: () => dayjs().add(90, 'day').format('l'),
		},
		{
			label: 'Owner',
			valueKey: 'Owner',
			disablePadding: false,
			type: 'string',
			searchKey: ['Owner_Name'],
			visible: false,
			hideSelect: true,
			disableSelect: true,
			operators: (value) => stringOperators('Owner_Name', value),
			required: true,
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Comment', value),
			required: false,
		},
		{
			label: 'Customer Notes',
			valueKey: 'Customer_Notes',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Customer_Notes', value),
			required: false,
		},
		{
			label: 'Terms & Conditions',
			valueKey: 'Terms_Conditions',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Terms_Conditions', value),
			required: false,
		},
		{
			label: 'Void',
			valueKey: 'Void_field',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Void_field', value),
		},
	],
});

//! Quote Line Items
export const quoteLineItemColumnsState = atom({
	key: 'quoteLineItemColumnsState',
	default: [
		{
			label: 'Quote',
			valueKey: 'Quote',
			disablePadding: false,
			type: 'string',
			searchKey: ['Quote.Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Quote.Name', value),
		},
		{
			label: '',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			icon: productTypeIcon,
			searchKey: ['Type'],
			visible: true,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Code',
			valueKey: 'Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Code'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Code', value),
			required: true,
		},
		{
			label: 'Manufacturer',
			valueKey: 'Manufacturer',
			disablePadding: false,
			type: 'string',
			searchKey: ['Manufacturer'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer', value),
		},
		{
			label: 'Quantity',
			valueKey: 'Quantity',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Sell Price Each',
			valueKey: 'Sell_Price_Each',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			collapseFormula: (data) => sum(data, 'Sell_Price_Subtotal'),
			operators: (value) => numberOperators('Sell_Price_Each', value),
		},
		{
			label: 'Sell Price Subtotal',
			valueKey: 'Sell_Price_Subtotal',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Sell_Price_Subtotal', value),
		},
		{
			label: 'Sell Price Total',
			valueKey: 'Sell_Price_Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Sell_Price_Total', value),
		},
		{
			label: 'Cost',
			valueKey: 'Cost',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			collapseFormula: (data) => sum(data, 'Cost_Total'),
			operators: (value) => numberOperators('Cost', value),
		},
		{
			label: 'Cost Total',
			valueKey: 'Cost_Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Cost_Total', value),
		},
		{
			label: 'Discount (%)',
			valueKey: 'Discount_Rate',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			format: percent,
			footer: sellDiscount,
			collapseFormula: sellDiscount,
			footerTooltip:
				'[abs(Sell Price Subtotal - Sell Price Total) / ((Sell Price Subtotal + Sell Price Total) / 2 )] * 100%',
			operators: (value) => numberOperators('Discount_Rate', value),
		},
		{
			label: 'Discount ($)',
			valueKey: 'Discount_Dollars',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Discount_Dollars', value),
		},
		{
			label: 'Margin (%)',
			valueKey: 'Margin',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: percent,
			footer: (params) => margin(params) * 100,
			collapseFormula: (params) => margin(params) * 100,
			footerTooltip:
				'[(Sell Price Total - Cost Total) / Sell Price Total] * 100%',
			operators: (value) => numberOperators('Margin', value),
		},
	],
});

//! RMAs
export const rMAColumnsState = atom({
	key: 'rMAColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'string',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Number', value),
			required: true,
		},
		{
			label: 'Vendor',
			valueKey: 'Vendor',
			disablePadding: false,
			type: 'string',
			searchKey: ['Vendor_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Vendor_Name', value),
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
			required: true,
		},
		{
			label: 'Contact',
			valueKey: 'Contact',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Contact_Name', value),
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
			required: true,
		},
		{
			label: 'Technicians Responsible',
			valueKey: 'Technicians_Responsible',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Technicians_Responsible', value),
			required: true,
		},
		{
			label: 'Cost of Repair',
			valueKey: 'Cost_of_Repair',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Cost_of_Repair', value),
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: ['Comment'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Comment', value),
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: ['Project', 'Service'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: () => [
				'Open - Advanced Replacement',
				'Open - Return for Credit',
				'Closed',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Price Book Item(s)',
			valueKey: 'Defective_Price_Book_Items',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) =>
				stringOperators('Defective_Price_Book_Items', value),
			required: true,
		},
		{
			label: 'Customer Asset',
			valueKey: 'Defective_Customer_Asset',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Defective_Customer_Asset', value),
		},
		{
			label: 'Sales Order',
			valueKey: 'Defective_Sales_Order',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Defective_Sales_Order', value),
		},
		{
			label: 'Price Book Item(s)',
			valueKey: 'Replacement_Price_Book_Items',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) =>
				stringOperators('Replacement_Price_Book_Items', value),
			required: true,
		},
		{
			label: 'Customer Asset',
			valueKey: 'Replacement_Customer_Asset',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) =>
				stringOperators('Replacement_Customer_Asset', value),
		},
		{
			label: 'Sales Order',
			valueKey: 'Replacement_Sales_Order',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Replacement_Sales_Order', value),
		},
	],
});

//! Sales Orders
export const salesOrderColumnsState = atom({
	key: 'salesOrderColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
			required: true,
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
			required: true,
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: [
				'Project Order',
				'Change Order INTERNAL',
				'Change Order EXTERNAL',
				'Service Order',
				'Service Contract',
				'Box Sale',
				'Rack Build Parts',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: (type) => {
				switch (type) {
					case 'Project Order':
						return [
							'Open for Drafting',
							'Drafting Review Complete',
							'Programming Review Complete',
							'Engineering Review Complete',
							'Waiting for Parts',
							'Partially Received',
							'Fully Received',
							'Closed',
						];
					case 'Change Order INTERNAL':
					case 'Change Order EXTERNAL':
					case 'Service Order':
					case 'Service Contract':
					case 'Box Sale':
						return [
							'Open',
							'Waiting for Parts',
							'Partially Received',
							'Fully Received',
							'Closed',
						];
					case 'Rack Build Parts':
						return ['Open', 'Closed'];
					default:
						return [
							'Open',
							'Open for Drafting',
							'Drafting Review Complete',
							'Programming Review Complete',
							'Engineering Review Complete',
							'Waiting for Parts',
							'Partially Received',
							'Fully Received',
							'Closed',
						];
				}
			},
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Total',
			valueKey: 'Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: (value) => currency(value),
			operators: (value) => numberOperators('Total', value),
			footer: sum,
		},
		{
			label: 'Converted from',
			valueKey: 'Converted_from',
			disablePadding: false,
			type: 'string',
			searchKey: ['Quote_Name'],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Converted_from', value),
		},
		{
			label: 'Terms',
			valueKey: 'Terms',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			options: ['Net 30', 'Net 45', 'Net 60', 'Net 90', 'Due on Receipt'],
			defaultValue: 'Net 30',
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Terms', value),
		},
		{
			label: 'Owner',
			valueKey: 'Owner',
			disablePadding: false,
			type: 'string',
			searchKey: ['Owner_Name'],
			visible: false,
			hideSelect: true,
			disableSelect: true,
			operators: (value) => stringOperators('Owner_Name', value),
			required: true,
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Comment', value),
			required: false,
		},
		{
			label: 'Customer Notes',
			valueKey: 'Customer_Notes',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Customer_Notes', value),
			required: false,
		},
		{
			label: 'Terms & Conditions',
			valueKey: 'Terms_Conditions',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Terms_Conditions', value),
			required: false,
		},
		{
			label: 'Void',
			valueKey: 'Void_field',
			disablePadding: false,
			type: 'bool',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => checkboxOperators('Void_field', value),
		},
	],
});

//! Sales Order Line Items
export const salesOrderLineItemColumnsState = atom({
	key: 'salesOrderLineItemColumnsState',
	default: [
		{
			label: 'Sales Order',
			valueKey: 'Sales_Order',
			disablePadding: false,
			type: 'string',
			searchKey: ['Sales_Order.Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Sales_Order.Name', value),
		},
		{
			label: '',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			icon: productTypeIcon,
			searchKey: ['Type'],
			visible: true,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Code',
			valueKey: 'Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Code'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Code', value),
			required: true,
		},
		{
			label: 'Manufacturer',
			valueKey: 'Manufacturer',
			disablePadding: false,
			type: 'string',
			searchKey: ['Manufacturer'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer', value),
		},
		{
			label: 'Quantity',
			valueKey: 'Quantity',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Sell Price Each',
			valueKey: 'Sell_Price_Each',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			collapseFormula: (data) => sum(data, 'Sell_Price_Subtotal'),
			operators: (value) => numberOperators('Sell_Price_Each', value),
		},
		{
			label: 'Sell Price Subtotal',
			valueKey: 'Sell_Price_Subtotal',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Sell_Price_Subtotal', value),
		},
		{
			label: 'Sell Price Total',
			valueKey: 'Sell_Price_Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Sell_Price_Total', value),
		},
		{
			label: 'Cost',
			valueKey: 'Cost',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			collapseFormula: (data) => sum(data, 'Cost_Total'),
			operators: (value) => numberOperators('Cost', value),
		},
		{
			label: 'Cost Total',
			valueKey: 'Cost_Total',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Cost_Total', value),
		},
		{
			label: 'Discount (%)',
			valueKey: 'Discount_Rate',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			format: percent,
			footer: sellDiscount,
			collapseFormula: sellDiscount,
			footerTooltip:
				'[abs(Sell Price Subtotal - Sell Price Total) / ((Sell Price Subtotal + Sell Price Total) / 2 )] * 100%',
			operators: (value) => numberOperators('Discount_Rate', value),
		},
		{
			label: 'Discount ($)',
			valueKey: 'Discount_Dollars',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: false,
			hideSelect: false,
			disableSelect: false,
			format: currency,
			footer: sum,
			collapseFormula: sum,
			operators: (value) => numberOperators('Discount_Dollars', value),
		},
		{
			label: 'Margin (%)',
			valueKey: 'Margin',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			format: percent,
			footer: (params) => margin(params) * 100,
			collapseFormula: (params) => margin(params) * 100,
			footerTooltip:
				'[(Sell Price Total - Cost Total) / Sell Price Total] * 100%',
			operators: (value) => numberOperators('Margin', value),
		},
	],
});

//! Serial Numbers
export const serialNumberColumnsState = atom({
	key: 'serialNumberColumnsState',
	default: [
		{
			label: 'Value',
			valueKey: 'Value',
			disablePadding: false,
			type: 'string',
			searchKey: ['Value'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Value', value),
			required: true,
		},
		{
			label: 'Warehouse Stock Item',
			valueKey: 'Warehouse_Stock_Item',
			disablePadding: false,
			type: 'string',
			searchKey: ['Warehouse_Stock_Item_Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Warehouse_Stock_Item_Name', value),
		},
		{
			label: 'Customer Asset',
			valueKey: 'Customer_Asset',
			disablePadding: false,
			type: 'string',
			searchKey: ['Customer_Asset_Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Customer_Asset_Name', value),
		},
		{
			label: 'Price Book Item',
			valueKey: 'Price_Book_Item',
			disablePadding: false,
			type: 'string',
			searchKey: [
				'Price_Book_Item_Name',
				'Price_Book_Item_Code',
				'Price_Book_Item_Description',
				'Manufacturer',
			],
			format: (params) =>
				`${
					params.Price_Book_Item_Name !== params.Price_Book_Item_Code
						? `${params.Price_Book_Item_Name} (${params.Price_Book_Item_Code})`
						: params.Price_Book_Item_Name
				}`,
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Price_Book_Item_Name', value),
		},
	],
});

//! Service Contracts
export const serviceContractColumnsState = atom({
	key: 'serviceContractColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: true,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Alias',
			valueKey: 'Alias',
			disablePadding: false,
			type: 'string',
			searchKey: ['Alias'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Alias', value),
		},
		{
			label: 'Billing Account',
			valueKey: 'Billing_Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Billing_Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Billing_Account_Name', value),
			required: true,
		},
		{
			label: 'Accounts',
			valueKey: 'Accounts',
			disablePadding: false,
			type: 'string',
			searchKey: ['Accounts_Names'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Accounts_Names', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: () => ['Active', 'Expired', 'Renewed'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: [
				'A - 1st Year Job Warranty (VMA)',
				'B - VMA (VP Maintenance Agreement)',
				'C - VMA w/Exclusions',
				'D - VMA & Codec Coverage',
				'E - VMA w/Exclusions & Codec Covg',
				'F - VMA & Codec Covg & Remote Monit.',
				'G - VMA & Remote Monitoring',
				'H - Codec Core Services Only (No Labor)',
				'I - Service Labor - Block of Time or Hours',
				'J - Service Labor And Equipment (Block of Money)',
				'K - Billable Manufacturers Warranty ONLY',
				'L - Parts, Firmware & Software Upgrades (No Labor)',
				'M - Parts Only Shipped NEXT DAY',
				'N - VP Hosting Agreement',
				'P- PrePaid Out-of-Scope Work',
				'S - Sales Support Subscription',
				'SL- StarLeaf',
				'V - Cisco/Acano Hosting',
				'W - Registered Managed Services',
				'X- Webex',
				'Y- Acano Maintenance',
				'Membership',
				'Codec Coverage',
			].sort(),
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
		},
		{
			label: 'Contract Value',
			valueKey: 'Contract_Value',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Contract_Value', value),
			required: true,
		},
		{
			label: 'Comment',
			valueKey: 'Comment',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Comment', value),
		},
		{
			label: 'Start Date',
			valueKey: 'Start_Date',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Start_Date', value),
			required: true,
		},
		{
			label: 'End Date',
			valueKey: 'End_Date',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('End_Date', value),
			required: true,
		},
		{
			label: 'Days Remaining',
			valueKey: 'Days_Remaining',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Days_Remaining', value),
		},
		{
			label: 'Contact',
			valueKey: 'Contact',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Contact_Full_Name', value),
		},
		{
			label: 'Renewed To',
			valueKey: 'Renewed_to_Contract',
			disablePadding: false,
			type: 'string',
			searchKey: ['Renewed_to_Contract_Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Renewed_to_Contract_Name', value),
		},
		{
			label: 'Renewed from',
			valueKey: 'Renewed_from_Contract',
			disablePadding: false,
			type: 'string',
			searchKey: ['Renewed_from_Contract_Name'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) =>
				stringOperators('Renewed_from_Contract_Name', value),
		},
		{
			label: 'Created',
			valueKey: 'Added_Time',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => dateTimeOperators('Added_Time', value),
		},
	],
});

//! Service Orders
export const serviceOrderColumnsState = atom({
	key: 'serviceOrderColumnsState',
	default: [
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Number',
			valueKey: 'Number',
			disablePadding: false,
			type: 'number',
			searchKey: ['Number'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => numberOperators('Number', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
			required: true,
		},
		{
			label: 'Account',
			valueKey: 'Account',
			disablePadding: false,
			type: 'string',
			searchKey: ['Account_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Name', value),
			required: true,
		},
		{
			label: 'Contact',
			valueKey: 'Contact',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Contact_Full_Name', value),
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: [
				'After Hours Call',
				'Box Sale',
				'Software Update',
				'Equipment Removal',
				'Equipment Rental',
				'Equipment Storage',
				'Equipment Move',
				'Follow-up from Service',
				'In-house Repair',
				'Level 2 Support',
				'Meeting Support',
				'Phone Support',
				'Phone to Onsite',
				'PM Visit',
				'Remote Monitoring Flags',
				'Remote Monitoring Program Issues',
				'Remote to Onsite',
				'RMA',
				'Room Check',
				'Service Call - Onsite',
				'Site Survey',
				'Summer Service Special',
				'Troubleshoot - In house',
				'Vehicle Maintenance',
				'Research',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: () => [
				'Open',
				'Complete',
				'Closed',
				'PM Pending',
				'Cancelled',
				'VOID',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
			required: true,
			defaultValue: 'Open',
		},
		{
			label: 'Service Contract',
			valueKey: 'Service_Contract',
			disablePadding: false,
			type: 'string',
			searchKey: ['Service Contract_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Contract_Name', value),
		},
		{
			label: 'Customer Rooms',
			valueKey: 'Customer_Rooms',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Customer_Rooms_Names', value),
		},
		{
			label: 'Billing Priority',
			valueKey: 'Billing_Priority',
			disablePadding: false,
			type: 'string',
			searchKey: ['Billing_Priority'],
			options: ['Billable', 'Not Billable', 'Partially Billable'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Billing_Priority', value),
			required: true,
		},
		{
			label: 'Technicians Assigned',
			valueKey: 'Technicians_Assigned',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Technicians Assigned', value),
		},
		{
			label: 'Work Requested',
			valueKey: 'Work_Requested',
			disablePadding: false,
			type: 'html',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Work_Requested', value),
			required: true,
		},
		{
			label: 'Work Performed',
			valueKey: 'Work_Performed',
			disablePadding: false,
			type: 'html',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Work_Performed', value),
		},
		{
			label: 'Date Created',
			valueKey: 'Added_Time',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => dateTimeOperators('Added_Time', value),
			defaultValue: null,
		},
		{
			label: 'Date Requested',
			valueKey: 'Date_Requested',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => dateTimeOperators('Date_Requested', value),
			defaultValue: null,
		},
		{
			label: 'Date Completed',
			valueKey: 'Date_Completed',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => dateOperators('Date_Completed', value),
		},
		{
			label: 'Date Closed',
			valueKey: 'Date_Closed',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => dateOperators('Date_Closed', value),
		},
	],
});

//! Subcontractors
export const subcontractorColumnsState = atom({
	key: 'subcontractorColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Primary Contact',
			valueKey: 'Primary_Contact',
			disablePadding: false,
			type: 'string',
			searchKey: ['Primary_Contact_Full_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Primary_Contact_Full_Name', value),
			required: true,
		},
		{
			label: 'Note',
			valueKey: 'Note',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Note', value),
		},
		{
			label: 'Contacts',
			valueKey: 'Contacts',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Contacts', value),
		},
		{
			label: 'Email',
			valueKey: 'Email',
			disablePadding: false,
			type: 'string',
			searchKey: ['Email'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Email', value),
		},
		{
			label: 'Phone',
			valueKey: 'Phone_Number',
			disablePadding: false,
			type: 'string',
			searchKey: ['Phone_Number'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Phone_Number', value),
		},
		{
			label: 'Website',
			valueKey: 'Website',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Website', value),
		},
		{
			label: 'Street',
			valueKey: 'Street',
			disablePadding: false,
			type: 'string',
			searchKey: ['Street'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Street', value),
			required: true,
		},
		{
			label: 'Street 2',
			valueKey: 'Street_2',
			disablePadding: false,
			type: 'string',
			searchKey: ['Street_2'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Street_2', value),
		},
		{
			label: 'City',
			valueKey: 'City',
			disablePadding: false,
			type: 'string',
			searchKey: ['City'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('City', value),
			required: true,
		},
		{
			label: 'State',
			valueKey: 'State',
			disablePadding: false,
			type: 'string',
			searchKey: ['State'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('State', value),
			required: true,
		},
		{
			label: 'Zip Code',
			valueKey: 'Zip_Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Zip_Code'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Zip_Code', value),
			required: true,
		},
	],
});

//! Subscriptions
export const subscriptionColumnsState = atom({
	key: 'subscriptionColumnsState',
	default: [
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type'],
			options: ['Block of Hours', 'Manufacturer', 'Subscription'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type', value),
			required: true,
		},
		{
			label: 'Manufacturer',
			valueKey: 'Manufacturer',
			disablePadding: false,
			type: 'string',
			searchKey: ['Manufacturer_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer_Name', value),
		},
		{
			label: 'Accounts',
			valueKey: 'Accounts',
			disablePadding: false,
			type: 'string',
			searchKey: ['Accounts_Names'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Accounts_Names', value),
			required: true,
		},
		{
			label: 'Service Contract',
			valueKey: 'Service_Contract',
			disablePadding: false,
			type: 'string',
			searchKey: ['Service_Contract_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Service_Contract_Name', value),
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'string',
			searchKey: ['Description'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
		},
		{
			label: 'Start Date',
			valueKey: 'Start_Date',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('Start_Date', value),
			required: true,
		},
		{
			label: 'End Date',
			valueKey: 'End_Date',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateOperators('End_Date', value),
			required: true,
		},
		{
			label: 'Days Remaining',
			valueKey: 'Days_Remaining',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Days_Remaining', value),
		},
		{
			label: 'Value',
			valueKey: 'Value',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Value', value),
			required: true,
		},
		{
			label: 'Purchase Order',
			valueKey: 'Purchase_Order',
			disablePadding: false,
			type: 'file',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Purchase_Order', value),
		},
		{
			label: 'Manufacturer Quote',
			valueKey: 'Manufacturer_Quote',
			disablePadding: false,
			type: 'file',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Manufacturer_Quote', value),
		},
		{
			label: 'Status',
			valueKey: 'Status',
			disablePadding: false,
			type: 'string',
			searchKey: ['Status'],
			options: () => ['Active', 'Expired', 'Renewed'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Status', value),
		},
	],
});

//! Tasks
export const taskColumnsState = atom({
	key: 'taskColumnsState',
	default: [
		{
			label: 'Employee(s)',
			valueKey: 'Employees',
			disablePadding: false,
			type: 'string',
			searchKey: ['Employees_Names'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value, currentUser) =>
				stringOperators('Employees_Names', value, {
					label: 'contains me',
					result: `Employees.contains(${currentUser?.ID})`,
					disableValue: true,
					provideCurrentUser: true,
				}),
			required: true,
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
			required: true,
		},
		{
			label: 'Type',
			valueKey: 'Type',
			disablePadding: false,
			type: 'string',
			searchKey: ['Type_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Type_Name', value),
			required: true,
		},
		{
			label: 'Start',
			valueKey: 'Start',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateTimeOperators('Start', value),
			required: true,
		},
		{
			label: 'End',
			valueKey: 'End',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateTimeOperators('End', value),
			required: true,
		},
		{
			label: 'Description',
			valueKey: 'Description',
			disablePadding: false,
			type: 'html',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Description', value),
		},
		{
			label: 'Street',
			valueKey: 'Street',
			disablePadding: false,
			type: 'string',
			searchKey: ['Street'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Street', value),
		},
		{
			label: 'Street 2',
			valueKey: 'Street_2',
			disablePadding: false,
			type: 'string',
			searchKey: ['Street_2'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Street_2', value),
		},
		{
			label: 'City',
			valueKey: 'City',
			disablePadding: false,
			type: 'string',
			searchKey: ['City'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('City', value),
		},
		{
			label: 'State',
			valueKey: 'State',
			disablePadding: false,
			type: 'string',
			searchKey: ['State'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('State', value),
		},
		{
			label: 'Zip Code',
			valueKey: 'Zip_Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Zip_Code'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Zip_Code', value),
		},
	],
});

//! Time Entries
export const timeEntryColumnsState = atom({
	key: 'timeEntryColumnsState',
	default: [
		{
			label: 'Employee',
			valueKey: 'Employee',
			disablePadding: false,
			type: 'string',
			searchKey: ['Employee_Full_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value, currentUser) =>
				stringOperators('Employee_Full_Name', value, {
					label: 'is me',
					result: `Employee==${currentUser?.ID}`,
					disableValue: true,
					provideCurrentUser: true,
				}),
			required: true,
			defaultValue: 'currentUser',
		},
		{
			label: 'Reference',
			valueKey: 'Reference',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reference_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reference_Name', value),
			required: true,
		},
		{
			label: 'Reason',
			valueKey: 'Reason',
			disablePadding: false,
			type: 'string',
			searchKey: ['Reason_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Reason_Name', value),
			required: true,
		},
		{
			label: 'Date',
			valueKey: 'Date_field',
			disablePadding: false,
			type: 'date',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => dateOperators('Date_field', value),
			required: true,
			defaultValue: () => dayjs().format('l'),
		},
		{
			label: 'Start Time',
			valueKey: 'Start_Time',
			disablePadding: false,
			type: 'time',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => timeOperators('Start_Time', value),
			required: true,
			defaultValue: '08:00 AM',
		},
		{
			label: 'End Time',
			valueKey: 'End_Time',
			disablePadding: false,
			type: 'time',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => timeOperators('End_Time', value),
			required: true,
			defaultValue: '05:00 PM',
		},
		{
			label: 'Start',
			valueKey: 'Report_Start',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateTimeOperators('Report_Start', value),
			defaultValue: null,
		},
		{
			label: 'End',
			valueKey: 'Report_End',
			disablePadding: false,
			type: 'dateTime',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => dateTimeOperators('Report_End', value),
			defaultValue: null,
		},
		{
			label: 'Actual Hours',
			valueKey: 'Actual_Hours',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Actual_Hours', value),
			footer: sum,
		},
		{
			label: 'Work Performed',
			valueKey: 'Work_Performed',
			disablePadding: false,
			type: 'string',
			searchKey: ['Work_Performed'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Work_Performed', value),
			required: true,
		},
	],
});

//! Vendors
export const vendorColumnsState = atom({
	key: 'vendorColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
			required: true,
		},
		{
			label: 'Primary Contact',
			valueKey: 'Primary_Contact',
			disablePadding: false,
			type: 'string',
			searchKey: ['Primary_Contact_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Primary_Contact_Name', value),
		},
		{
			label: 'Note',
			valueKey: 'Note',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Note', value),
		},
		{
			label: 'Contacts',
			valueKey: 'Contacts',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Contacts', value),
		},
		{
			label: 'Account Number',
			valueKey: 'Account_Number',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Account_Number', value),
		},
		{
			label: 'Tax ID Number',
			valueKey: 'Tax_ID_Number',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Tax_ID_Number', value),
		},
		{
			label: 'Ordered Through',
			valueKey: 'Ordered_Through',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			options: ['Purchase Order', 'Website'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Ordered_Through', value),
			defaultValue: 'Purchase Order',
			required: true,
		},
		{
			label: 'Phone',
			valueKey: 'Phone',
			disablePadding: false,
			type: 'string',
			searchKey: ['Phone'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Phone', value),
		},
		{
			label: 'Email',
			valueKey: 'Email',
			disablePadding: false,
			type: 'string',
			searchKey: ['Email'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Email', value),
		},
		{
			label: 'Street',
			valueKey: 'Street',
			disablePadding: false,
			type: 'string',
			searchKey: ['Street'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Street', value),
			required: true,
		},
		{
			label: 'Street 2',
			valueKey: 'Street_2',
			disablePadding: false,
			type: 'string',
			searchKey: ['Street_2'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Street_2', value),
		},
		{
			label: 'City',
			valueKey: 'City',
			disablePadding: false,
			type: 'string',
			searchKey: ['City'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('City', value),
			required: true,
		},
		{
			label: 'State',
			valueKey: 'State',
			disablePadding: false,
			type: 'string',
			searchKey: ['State'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('State', value),
			required: true,
		},
		{
			label: 'Zip Code',
			valueKey: 'Zip_Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Zip_Code'],
			visible: false,
			hideSelect: true,
			disableSelect: false,
			operators: (value) => stringOperators('Zip_Code', value),
			required: true,
		},
	],
});

//#region //TODO Admin Only

//? Warehouses
export const warehouseColumnsState = atom({
	key: 'warehouseColumnsState',
	default: [
		{
			label: 'Name',
			valueKey: 'Name',
			disablePadding: false,
			type: 'string',
			searchKey: ['Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Name', value),
		},
		{
			label: 'Managers',
			valueKey: 'Managers',
			disablePadding: false,
			type: 'string',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Managers', value),
		},
		{
			label: 'Street',
			valueKey: 'Street',
			disablePadding: false,
			type: 'string',
			searchKey: ['Street'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Street', value),
		},
		{
			label: 'Street 2',
			valueKey: 'Street_2',
			disablePadding: false,
			type: 'string',
			searchKey: ['Street_2'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Street_2', value),
		},
		{
			label: 'City',
			valueKey: 'City',
			disablePadding: false,
			type: 'string',
			searchKey: ['City'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('City', value),
		},
		{
			label: 'State',
			valueKey: 'State',
			disablePadding: false,
			type: 'string',
			searchKey: ['State'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('State', value),
		},
		{
			label: 'Zip Code',
			valueKey: 'Zip_Code',
			disablePadding: false,
			type: 'string',
			searchKey: ['Zip_Code'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Zip_Code', value),
		},
	],
});

//? Warehouse Stock Items
export const warehouseStockItemColumnsState = atom({
	key: 'warehouseStockItemColumnsState',
	default: [
		{
			label: 'Warehouse',
			valueKey: 'Warehouse',
			disablePadding: false,
			type: 'string',
			searchKey: ['Warehouse_Name'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Warehouse', value),
		},
		{
			label: 'Price Book Item',
			valueKey: 'Price_Book_Item.Product_Info',
			disablePadding: false,
			type: 'string',
			searchKey: [
				'Price_Book_Item_Name',
				'Price_Book_Item_Code',
				'Manufacturer_Name',
				'Price_Book_Item_Description',
			],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Price_Book_Item', value),
		},
		{
			label: 'Quantity in Stock',
			valueKey: 'Quantity_in_Stock',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity_in_Stock', value),
		},
		{
			label: 'Quantity on Order',
			valueKey: 'Quantity_on_Order',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity_on_Order', value),
		},
		{
			label: 'Quantity on Reserve',
			valueKey: 'Quantity_on_Reserve',
			disablePadding: false,
			type: 'number',
			searchKey: [],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => numberOperators('Quantity_on_Reserve', value),
		},
		{
			label: 'Serial Numbers',
			valueKey: 'Serial_Numbers',
			disablePadding: false,
			type: 'string',
			searchKey: ['Serial_Numbers_Values'],
			visible: true,
			hideSelect: false,
			disableSelect: false,
			operators: (value) => stringOperators('Serial_Numbers', value),
		},
	],
});

//? Warehouse Stock Item Reservations
export const warehouseStockItemReservationColumnsState = atom({
	key: 'warehouseStockItemReservationColumnsState',
	default: [],
});

//#endregion

//#region //TODO Wizards
//* Purchasing
export const wizardPurchasingColumnsState = atom({
	key: 'wizardPurchasingColumnsState',
	default: [],
});

//* Change Order
export const wizardChangeOrderColumnsState = atom({
	key: 'wizardChangeOrderColumnsState',
	default: [],
});

//* Product Filling
export const wizardProductFillingColumnsState = atom({
	key: 'wizardProductFillingColumnsState',
	default: [],
});

//#endregion
